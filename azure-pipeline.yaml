# Built-test-staging-prod pipeline
trigger:
- main

variables:
  terraformVersion: 1.6.2
  tfFilesArtifactName: 'tf-files'
  tfPlanArtifactName: 'tf-plan'
  # skipComponentGovernanceDetection: true
  
pool:
 vmImage: 'ubuntu-latest'

stages:
- stage: prepare
  jobs:
  - job: prepare
    displayName: 'Prepare Terraform'
    steps:
    # - task: CopyFiles@2
    #   inputs:
    #     contents: '*'
    #     targetFolder: '$(Build.ArtifactStagingDirectory)'
    - publish: '$(system.defaultWorkingDirectory)/'
      artifact: $(tfFilesArtifactName)
    - script: echo Prepare Terraform
    - task: TerraformInstaller@1
      displayName: Install Terraform $(terraformVersion)
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformTaskV4@4
      displayName: 'Terraform INIT'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'service-connection-demo'
        backendAzureRmResourceGroupName: 'azure-rg-infra'
        backendAzureRmStorageAccountName: 'infrademostate'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'
    - task: TerraformTaskV4@4
      displayName: 'Terraform VALIDATE'
      inputs:
        provider: 'azurerm'
        command: 'validate'

- stage: plan
  dependsOn: prepare
  jobs:
  - job: plan
    displayName: Terraform Plan
    steps:
    - checkout: none
    - download: current 
    - script: echo Plan
    - task: TerraformInstaller@1
      displayName: Install Terraform $(terraformVersion)
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformTaskV4@4
      displayName: Terraform INIT
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'service-connection-demo'
        backendAzureRmResourceGroupName: 'azure-rg-infra'
        backendAzureRmStorageAccountName: 'infrademostate'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'
        workingDirectory: '$(Pipeline.Workspace)/$(tfFilesArtifactName)/'
    - task: TerraformTaskV4@4
      displayName: Terraform PLAN
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out main.tfplan'
        workingDirectory: '$(Pipeline.Workspace)/$(tfFilesArtifactName)/'
        environmentServiceNameAzureRM: 'service-connection-demo'
    - publish: '$(pipeline.workspace)/$(tfFilesArtifactName)'
      artifact: $(tfPlanArtifactName)
        
- stage: apply
  dependsOn: plan
  jobs:
  - job: apply
    steps:
    - checkout: none
    - script: echo Apply
    - download: current
      artifact: $(tfPlanArtifactName)
    - script: ls -la $(Pipeline.Workspace)
    - task: TerraformInstaller@1
      displayName: Install Terraform $(terraformVersion)
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformTaskV4@4
      displayName: Apply Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: 'main.tfplan'
        workingDirectory: '$(Pipeline.Workspace)/$(tfPlanArtifactName)/'
        environmentServiceNameAzureRM: 'service-connection-demo'