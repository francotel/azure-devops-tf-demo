# Built-test-staging-prod pipeline
trigger:
- main

variables:
  terraformVersion: 1.6.2
  tfFilesArtifactName: 'tf-files'
  tfPlanArtifactName: 'tf-plan'
  # skipComponentGovernanceDetection: true
  
pool:
 vmImage: 'ubuntu-latest'

stages:
- stage: prepare
  jobs:
  - job: prepare
    displayName: 'Prepare Terraform'
    steps:
    # - task: CopyFiles@2
    #   inputs:
    #     contents: '*'
    #     targetFolder: '$(Build.ArtifactStagingDirectory)'
    # - task: PublishPipelineArtifact@1
    #   inputs:
    #     targetPath: $(Build.ArtifactStagingDirectory)/
    #     artifactName: $(tfFilesArtifactName)
    - publish: '$(system.defaultWorkingDirectory)/'
      artifact: $(tfFilesArtifactName)
    - script: echo Prepare Terraform
    - task: TerraformInstaller@1
      displayName: Install Terraform $(terraformVersion)
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformTaskV4@4
      displayName: 'Terraform INIT'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'service-connection-demo'
        backendAzureRmResourceGroupName: 'azure-rg-infra'
        backendAzureRmStorageAccountName: 'infrademostate'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'
    - task: TerraformTaskV4@4
      displayName: 'Terraform VALIDATE'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        # workingDirectory: '$(System.DefaultWorkingDirectory)/$(env)'
        # commandOptions: 
    - script: ls -la

- stage: plan
  dependsOn: prepare
  jobs:
  - job: plan
    displayName: Terraform Plan
    steps:
    - checkout: none
    # - task: DownloadPipelineArtifact@2
    #   inputs:
    #     artifact: tf-files
    - download: current 
    - script: ls $(Pipeline.Workspace)
    - script: echo Plan
    - task: TerraformInstaller@1
      displayName: Install Terraform $(terraformVersion)
      inputs:
        terraformVersion: $(terraformVersion)
    - task: TerraformTaskV4@4
      displayName: Terraform INIT
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'service-connection-demo'
        backendAzureRmResourceGroupName: 'azure-rg-infra'
        backendAzureRmStorageAccountName: 'infrademostate'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'terraform.state'
        workingDirectory: '$(Pipeline.Workspace)/${tfFilesArtifactName}/'
    - task: TerraformTaskV4@4
      displayName: Terraform PLAN
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out main.tfplan'
        workingDirectory: '$(Pipeline.Workspace)/${tfFilesArtifactName}/'
        environmentServiceNameAzureRM: 'service-connection-demo'
    - publish: '$(pipeline.workspace)/$(tfFilesArtifactName)'
      artifact: $(tfPlanArtifactName)
        
- stage: apply
  dependsOn: plan
  jobs:
  - job: apply
    steps:
    - checkout: none
    - script: echo Apply
    - download: current
      artifact: $(tfPlanArtifactName)
    - script: ls -la

# - stage: prod
#   dependsOn: staging
#   jobs:
#   - job: deploy_prod
#     steps:
#     - script: echo Prod

# stages:
# - stage: 'prepare'
#   displayName: 'prepare'
#   jobs:
#   - job: 'prepare'
#     displayName: 'prepare'
#     steps:
#     - publish: '$(system.defaultWorkingDirectory)/'
#       artifact: $(tfFilesArtifactName)
#     - task: TerraformInstaller@1
#       displayName: Install Terraform $(terraformVersion)
#       inputs:
#         terraformVersion: $(terraformVersion)
#     - task: TerraformTaskV4@4
#       displayName: Initialize Terraform
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         backendServiceArm: 'service-connection-demo'
#         backendAzureRmResourceGroupName: 'azure-rg-infra'
#         backendAzureRmStorageAccountName: 'infrademostate'
#         backendAzureRmContainerName: 'tstate'
#         backendAzureRmKey: 'terraform.state'
#   - job: 'plan'
#     displayName: 'plan'
#     steps:
#     - task: TerraformTaskV4@4
#       name: terraformPlan
#       displayName: Create Terraform Plan
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         commandOptions: '-out main.tfplan'
#         environmentServiceNameAzureRM: 'service-connection-demo'
    # - script: |
    #     terraform init \
    #         -backend=false
    #     terraform validate
    #   workingDirectory: $(system.defaultWorkingDirectory)/tf
    #   failOnStderr: true
    #   displayName: 'terraform validate'
# - template: azure-pipelines-tf-plan-apply-template.yml
#   parameters:
#     environment: dev
# - template: azure-pipelines-tf-plan-apply-template.yml
#   parameters:
#     environment: prod

# stages:




#   - script: terraform version

#   - task: TerraformTaskV4@4
#     name: terraformPlan
#     displayName: Create Terraform Plan
#     inputs:
#       provider: 'azurerm'
#       command: 'plan'
#       commandOptions: '-out main.tfplan'
#       environmentServiceNameAzureRM: 'service-connection-demo'



# stages:
#   - stage: Build
#     jobs:
#       - job: Terraform_Plan
#         displayName: Terraform Plan - Publish a package if Infrastructure changes are identified
#         continueOnError: false
#         pool:
#           vmImage: $(vmImageName)
#         steps:
#           - task: DownloadSecureFile@1
#             displayName: "Download secure file $(backend_main_secret_file_id1)"
#             inputs:
#               secureFile: $(backend_main_secret_file_id1)

#           - template: terraform.yml@Yaml_Templates
#             parameters:
#               version: $(terraform_version)
#               path: "./AzureDevops-Introduction/aks-k8s/"
#               package_name: "aks-k8s"
#               terraform_init: true
#               terraform_plan: true
#               backend_secret_file_id: $(backend_main_secret_file_id1)
#               backend_file_path: "variable/backend-jdld.tfvars"
#               main_secret_file_id: $(backend_main_secret_file_id1)
#               main_file_path: "variable/main-jdld.tfvars"

#           - publish: "./ArtifactPublishLocation" # Local path to include in the Artifact
#             artifact: "$(artifact_name)"

#   - stage: Deploy
#     dependsOn: Build
#     jobs:
#       # track deployments on the environment
#       - deployment: Terraform_Apply
#         displayName: Terraform Apply - Resources creation
#         pool:
#           vmImage: $(vmImageName)
#         environment: "Terraform_Apply"
#         strategy:
#           # default deployment strategy
#           runOnce:
#             deploy:
#               steps:
#                 - template: terraform.yml@Yaml_Templates
#                   parameters:
#                     version: $(terraform_version)
#                     artifact_path: $(Pipeline.Workspace)/$(artifact_name)
#                     package_name: "aks-k8s"
#                     terraform_apply: true
#                     main_file_path: "variable/main-jdld.tfvars"

#   - stage: Deliver
#     dependsOn: Deploy
#     jobs:
#       # track deployments on the environment
#       - deployment: Terraform_Destroy
#         displayName: Terraform Destroy - Script ok, now deleting the resources
#         pool:
#           vmImage: $(vmImageName)
#         environment: "Terraform_Destroy"
#         strategy:
#           # default deployment strategy
#           runOnce:
#             deploy:
#               steps:
#                 - task: DownloadSecureFile@1
#                   displayName: Download secure file $(backend_main_secret_file_id1)
#                   inputs:
#                     secureFile: $(backend_main_secret_file_id1)

#                 - template: terraform.yml@Yaml_Templates
#                   parameters:
#                     version: $(terraform_version)
#                     artifact_path: $(Pipeline.Workspace)/$(artifact_name)
#                     package_name: "aks-k8s"
#                     terraform_destroy: true
#                     main_secret_file_id: $(backend_main_secret_file_id1)
#                     main_file_path: "variable/main-jdld.tfvars"

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : INIT'
#   inputs:
#     backendServiceArm: 'Jonnychipz-TFSPN'
#     backendAzureRmResourceGroupName: 'jonnychipz-infra'
#     backendAzureRmStorageAccountName: jonnychipztstate
#     backendAzureRmContainerName: tstate
#     backendAzureRmKey: '77Q4LUB5o9wRdbPYDt+0kGZP+L8Sj9E/FNXg7lZBQS5z3mLod5cyan4wA19CR1SmlqIRUFQfhuQrPVaGzNhjGw=='

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : PLAN'
#   inputs:
#     command: plan
#     environmentServiceNameAzureRM: 'Jonnychipz-TFSPN'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : VAL & APPLY'
#   inputs:
#     command: apply
#     environmentServiceNameAzureRM: 'Jonnychipz-TFSPN'


# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'
  

# - task: TerraformTaskV4@4
#   displayName: Initialize Terraform
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     backendServiceArm: 'your-backend-service-connection'
#     backendAzureRmResourceGroupName: 'your-rg-name'
#     backendAzureRmStorageAccountName: 'your-stg-name'
#     backendAzureRmContainerName: 'your-container-name'
#     backendAzureRmKey: 'state.tfstate'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : INIT'
#   inputs:
#     backendServiceArm: 'Jonnychipz-TFSPN'
#     backendAzureRmResourceGroupName: 'jonnychipz-infra'
#     backendAzureRmStorageAccountName: jonnychipztstate
#     backendAzureRmContainerName: tstate
#     backendAzureRmKey: '77Q4LUB5o9wRdbPYDt+0kGZP+L8Sj9E/FNXg7lZBQS5z3mLod5cyan4wA19CR1SmlqIRUFQfhuQrPVaGzNhjGw=='

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : PLAN'
#   inputs:
#     command: plan
#     environmentServiceNameAzureRM: 'Jonnychipz-TFSPN'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : VAL & APPLY'
#   inputs:
#     command: apply
#     environmentServiceNameAzureRM: 'Jonnychipz-TFSPN'

